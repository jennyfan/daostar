// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class RegistrationInstance extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save RegistrationInstance entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type RegistrationInstance must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("RegistrationInstance", id.toString(), this);
    }
  }

  static loadInBlock(id: string): RegistrationInstance | null {
    return changetype<RegistrationInstance | null>(
      store.get_in_block("RegistrationInstance", id)
    );
  }

  static load(id: string): RegistrationInstance | null {
    return changetype<RegistrationInstance | null>(
      store.get("RegistrationInstance", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get registrationAddress(): Bytes {
    let value = this.get("registrationAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set registrationAddress(value: Bytes) {
    this.set("registrationAddress", Value.fromBytes(value));
  }

  get daoAddress(): Bytes {
    let value = this.get("daoAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set daoAddress(value: Bytes) {
    this.set("daoAddress", Value.fromBytes(value));
  }

  get daoURI(): string {
    let value = this.get("daoURI");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set daoURI(value: string) {
    this.set("daoURI", Value.fromString(value));
  }

  get daoName(): string | null {
    let value = this.get("daoName");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set daoName(value: string | null) {
    if (!value) {
      this.unset("daoName");
    } else {
      this.set("daoName", Value.fromString(<string>value));
    }
  }

  get registrationNetwork(): string {
    let value = this.get("registrationNetwork");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set registrationNetwork(value: string) {
    this.set("registrationNetwork", Value.fromString(value));
  }

  get daoDescription(): string | null {
    let value = this.get("daoDescription");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set daoDescription(value: string | null) {
    if (!value) {
      this.unset("daoDescription");
    } else {
      this.set("daoDescription", Value.fromString(<string>value));
    }
  }

  get membersURI(): string | null {
    let value = this.get("membersURI");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set membersURI(value: string | null) {
    if (!value) {
      this.unset("membersURI");
    } else {
      this.set("membersURI", Value.fromString(<string>value));
    }
  }

  get issuersURI(): string | null {
    let value = this.get("issuersURI");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set issuersURI(value: string | null) {
    if (!value) {
      this.unset("issuersURI");
    } else {
      this.set("issuersURI", Value.fromString(<string>value));
    }
  }

  get proposalsURI(): string | null {
    let value = this.get("proposalsURI");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set proposalsURI(value: string | null) {
    if (!value) {
      this.unset("proposalsURI");
    } else {
      this.set("proposalsURI", Value.fromString(<string>value));
    }
  }

  get governanceURI(): string | null {
    let value = this.get("governanceURI");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set governanceURI(value: string | null) {
    if (!value) {
      this.unset("governanceURI");
    } else {
      this.set("governanceURI", Value.fromString(<string>value));
    }
  }

  get activityLogURI(): string | null {
    let value = this.get("activityLogURI");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set activityLogURI(value: string | null) {
    if (!value) {
      this.unset("activityLogURI");
    } else {
      this.set("activityLogURI", Value.fromString(<string>value));
    }
  }

  get managerAddress(): string | null {
    let value = this.get("managerAddress");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set managerAddress(value: string | null) {
    if (!value) {
      this.unset("managerAddress");
    } else {
      this.set("managerAddress", Value.fromString(<string>value));
    }
  }

  get contractsRegistryURI(): string | null {
    let value = this.get("contractsRegistryURI");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set contractsRegistryURI(value: string | null) {
    if (!value) {
      this.unset("contractsRegistryURI");
    } else {
      this.set("contractsRegistryURI", Value.fromString(<string>value));
    }
  }
}

export class RegistrationNetwork extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save RegistrationNetwork entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type RegistrationNetwork must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("RegistrationNetwork", id.toString(), this);
    }
  }

  static loadInBlock(id: string): RegistrationNetwork | null {
    return changetype<RegistrationNetwork | null>(
      store.get_in_block("RegistrationNetwork", id)
    );
  }

  static load(id: string): RegistrationNetwork | null {
    return changetype<RegistrationNetwork | null>(
      store.get("RegistrationNetwork", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get registrations(): RegistrationInstanceLoader {
    return new RegistrationInstanceLoader(
      "RegistrationNetwork",
      this.get("id")!.toString(),
      "registrations"
    );
  }

  get chainId(): string {
    let value = this.get("chainId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set chainId(value: string) {
    this.set("chainId", Value.fromString(value));
  }
}

export class RegistrationInstanceLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): RegistrationInstance[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<RegistrationInstance[]>(value);
  }
}
